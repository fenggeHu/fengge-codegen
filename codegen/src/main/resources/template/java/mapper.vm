package ${mapperPackage};
import org.apache.ibatis.annotations.*;
import ${entityPackage}.${entityClassName};
#if($tableInfo.allIndexColumns.size() >1)
import ${queryPackage}.${baseClassName}Query;
#end
import java.util.Collection;
import java.util.List;
#if($tableInfo.hasTimestampType())
import java.sql.Timestamp;
#end

/**
 * ${tableInfo.remarks} - 表名${tableInfo.name}
 **/
public interface ${mapperClassName} {

@Insert({"INSERT INTO `${tableInfo.name}`($_mapper.insertColumns(${tableInfo}))" ,
    " VALUES($_mapper.insertValues(${tableInfo}))"
    })
    #if(${tableInfo.autoIncrementField})
    @Options(useGeneratedKeys = true, keyProperty = "${tableInfo.autoIncrementField.name}")
    long insert(${entityClassName} entity);
    #else
    void insert(${entityClassName} entity);
    #end

@Insert({"INSERT INTO `${tableInfo.name}`($_mapper.insertColumns(${tableInfo}))" ,
    " VALUES($_mapper.insertValues(${tableInfo}))" ,
    " ON DUPLICATE KEY UPDATE $_mapper.onDuplicateKeyUpdate(${tableInfo})"
    })
    #if(${tableInfo.autoIncrementField})
    @Options(useGeneratedKeys = true, keyProperty = "${tableInfo.autoIncrementField.name}")
    long insertWithUpdate(${entityClassName} entity);
    #else
    void insertWithUpdate(${entityClassName} entity);
    #end
    /** 批量插入 */
@Insert({"<script>" ,
"INSERT INTO `${tableInfo.name}`($_mapper.insertColumns(${tableInfo})) VALUES " ,
"<foreach collection ='entities' item='it' separator =','>" +
"($_mapper.batchInsertValues(${tableInfo}))" +
"</foreach>",
"</script>"
})
#if(${tableInfo.autoIncrementField})
    @Options(useGeneratedKeys = true, keyProperty = "${tableInfo.autoIncrementField.name}")
#end
void batchInsert(@Param("entities") Collection<${entityClassName}> entities);
/* batch INSERT 使用ON DUPLICATE KEY UPDATE时，返回的集合里只有第一个对象被赋值了自增的id，所以不加注解@Options */
@Insert({"<script>" ,
"INSERT INTO `${tableInfo.name}`($_mapper.insertColumns(${tableInfo})) VALUES " ,
"<foreach collection ='entities' item='it' separator =','>" +
"($_mapper.batchInsertValues(${tableInfo}))" +
"</foreach>" ,
" ON DUPLICATE KEY UPDATE $_mapper.onDuplicateKeyUpdate(${tableInfo})" ,
"</script>"
})
void batchInsertWithUpdate(@Param("entities") Collection<${entityClassName}> entities);

#if($tableInfo.pkColumns.size() > 0)
#set($inx=0)
/** 按pk更新所有字段，可置空字段的值 */
@Update({"<script>UPDATE `${tableInfo.name}` SET ",
" $_mapper.updateSet(${tableInfo}) " +
" WHERE #foreach($pkName in $tableInfo.pkNames)#if(${foreach.index}!=0) AND #end `$pkName` = #{$_name.toPropertyName(${pkName})}#end",
    "</script>" })
    int update(${entityClassName} entity);

/** 按pk更新有值的字段，只更新入参值不为null的字段 */
@Update({"<script>UPDATE `${tableInfo.name}` SET ",
#foreach($pkName in $tableInfo.pkNames)
#if(${foreach.index}==0)
"`$pkName` = #{$_name.toPropertyName(${pkName})}" +
#end
#end
#foreach($col in $tableInfo.updateColumns)
    #if(!$tableInfo.pkNames.contains(${col.name}))
        "<if test='$_name.toPropertyName(${col.name})!=null'>, `${col.name}`=#{$_name.toPropertyName("${col.name}")}</if>"+ 
    #end
#end
" WHERE #foreach($pkName in $tableInfo.pkNames)#if(${foreach.index}!=0) AND #end `$pkName` = #{$_name.toPropertyName(${pkName})}#end",
    "</script>" })
    int updateSelective(${entityClassName} entity);
#end

#if($tableInfo.pkColumns.size() > 0)
/** 按PK精确查询 */
@Select("SELECT * FROM `${tableInfo.name}` $_mapper.pkWhere(${tableInfo}) limit 1")
${entityClassName} selectByPrimaryKey($_mapper.pkParam(${tableInfo}));

#if($tableInfo.pkColumns.size() == 1)
#set($pkCol = $tableInfo.pkColumns.get(0))
#set($pkColProp = $_name.toPropertyName($pkCol.name))
/** 按PK批量查询 */
@Select({"<script>",
    "SELECT * FROM `${tableInfo.name}` WHERE `$pkCol.name` in ",
    "<foreach collection='${pkColProp}s' item='it' index='index' open='(' separator=',' close=')'>",
        "#{it}",
    "</foreach>",
    "</script>"
})
List<${entityClassName}> selectByIds(@Param("${pkColProp}s") Collection<$pkCol.javaType> ${pkColProp}s);
#end
#end

#if($tableInfo.ukColumns.size() > 0)
/**
* 通过唯一索引精确查询1个返回结果 - 按业务规则需要修改条件
*/
@Select("SELECT * FROM `${tableInfo.name}` $_mapper.ukWhere(${tableInfo}) limit 1")
${entityClassName} selectOneByUniqueKey($_mapper.ukParam(${tableInfo}));
#end

$_mapper.genAllSqlWithIndex(${tableInfo})

#if($tableInfo.allIndexColumns.size() >1)
/**
* 按索引字段的Query对象查询
*/
@Select({"<script>",
"SELECT * FROM `${tableInfo.name}` WHERE 1=1 " +
#foreach($col in $tableInfo.getAllIndexColumns())
    "<if test='$_name.toPropertyName(${col.name})!=null'> AND `$col.name` = #{$_name.toPropertyName(${col.name})}</if>" +
 #end
    "<if test='pager!=null'> LIMIT #{pager.pageSize}</if></script>" })
List<${entityClassName}> query(${baseClassName}Query query);

/**
* 分页查询
*/
@Select({"<script>",
"SELECT * FROM `${tableInfo.name}` WHERE 1=1 " +
#foreach($col in $tableInfo.allIndexColumns)
    "<if test='$_name.toPropertyName(${col.name})!=null'> AND `$col.name` = #{$_name.toPropertyName(${col.name})}</if>" +
 #end
    " LIMIT #{pager.startRow}, #{pager.pageSize}" +
    "</script>" })
List<${entityClassName}> queryWithPaging(${baseClassName}Query query);
#end

}